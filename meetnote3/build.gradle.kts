import java.util.Base64

plugins {
    kotlin("multiplatform") version "2.0.0"
    kotlin("plugin.power-assert") version "2.0.0"
    kotlin("plugin.serialization") version "2.0.0"
    id("io.gitlab.arturbosch.detekt")
    id("org.jlleitschuh.gradle.ktlint")
}

kotlin {
    macosArm64("native") {
        binaries {
            executable {
                // show GC logs
//                freeCompilerArgs += listOf("-Xruntime-logs=gc=info")
            }
        }
    }

    sourceSets {
        commonMain {
            dependencies {
                implementation(project(":model"))

                implementation(project.dependencies.platform("io.ktor:ktor-bom:2.3.12"))
                implementation("io.ktor:ktor-client-core")
                implementation("io.ktor:ktor-client-darwin")
                implementation("io.ktor:ktor-server-core")
                implementation("io.ktor:ktor-server-cio")
                implementation("io.ktor:ktor-server-content-negotiation")
                implementation("io.ktor:ktor-serialization-kotlinx-json")
                implementation("io.ktor:ktor-server-cors")

                implementation("com.squareup.okio:okio:3.9.0")
                implementation("org.jetbrains.kotlinx:kotlinx-coroutines-core:1.8.1")
                implementation("org.jetbrains.kotlinx:kotlinx-datetime:0.6.0")
                implementation("org.jetbrains.kotlinx:kotlinx-html:0.11.0")
                implementation("org.jetbrains.kotlinx:kotlinx-serialization-json:1.7.1")
            }
        }

        val nativeMain by getting {
            kotlin.srcDir("src/nativeMain/kotlin")
            kotlin.srcDir("build/generated/kotlin") // Add this line
        }
    }
}

tasks.register("generateGpt2Kt") {
    doLast {
        val sourceFile = file(rootDir.resolve("scripts/summarize.py"))
        val targetFile = projectDir.resolve("build/generated/kotlin/meetnote3/python/Gpt2.kt")
        val content = sourceFile.readText()

        val kotlinFileContent = listOf(
            "// This file was auto generated by build.gradle.kts",
            "package meetnote3.python\n",
            "const val SUMMARIZE_GPT2 = \"\"\"",
            content,
            "\"\"\"\n",
        ).joinToString("\n")

        targetFile.parentFile.mkdirs()
        targetFile.writeText(kotlinFileContent)
    }
}

tasks.register("generateFrontendJs") {
    dependsOn(":frontend:build")

    doLast {
        val sourceFile = file(rootDir.resolve("frontend/build/dist/js/productionExecutable/frontend.js"))
        val targetFile = projectDir.resolve("build/generated/kotlin/meetnote3/static/FrontendJs.kt")
        val content = sourceFile
            .readText()
            .replace("http://localhost:9090", "")
        // replace the backend URL

        val encoded = Base64.getEncoder().encodeToString(content.toByteArray())

        val kotlinFileContent = listOf(
            "// This file was auto generated by build.gradle.kts",
            "package meetnote3.static\n",
            "@Suppress(\"ktlint:standard:max-line-length\")",
            """const val FRONTEND_JS = "$encoded"""",
            "",
        ).joinToString("\n")

        targetFile.parentFile.mkdirs()
        targetFile.writeText(kotlinFileContent)
    }
}

tasks.register("generateFrontendHtml") {
    doLast {
        val sourceFile = file(rootDir.resolve("frontend/src/commonMain/resources/index.html"))
        val targetFile = projectDir.resolve("build/generated/kotlin/meetnote3/static/FrontendHtml.kt")
        val content = sourceFile.readText()

        val kotlinFileContent = listOf(
            "// This file was auto generated by build.gradle.kts",
            "package meetnote3.static\n",
            "const val FRONTEND_HTML = \"\"\"",
            content,
            "\"\"\"\n",
        ).joinToString("\n")

        targetFile.parentFile.mkdirs()
        targetFile.writeText(kotlinFileContent)
    }
}

tasks.named("compileKotlinNative") {
    dependsOn("generateGpt2Kt")
    dependsOn("generateFrontendJs")
    dependsOn("generateFrontendHtml")
}
